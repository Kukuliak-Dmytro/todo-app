// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  todos        Todo[]
  createdAt    DateTime @default(now())
  invitesSent  TodoShare[] @relation("UserInvitesSent")
  receivedInvites TodoShare[] @relation("UserInvitesReceived")
}

model Todo {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  tasks       Task[]
  createdAt   DateTime    @default(now())
}

model Task {
  id        Int      @id @default(autoincrement())
  content   String
  completed Boolean  @default(false)
  todo      Todo     @relation(fields: [todoId], references: [id])
  todoId    Int
  createdAt DateTime @default(now())
}

// For future sharing feature
model TodoShare {
  id               Int      @id @default(autoincrement())
  inviterUserId    Int      // the user who shared
  inviter          User     @relation("UserInvitesSent", fields: [inviterUserId], references: [id])
  invitedUserId    Int      // the user who received
  invitedUser      User     @relation("UserInvitesReceived", fields: [invitedUserId], references: [id])
  invitedUserEmail String
  permission       String // 'read' or 'write'
  status           InviteStatus @default(PENDING)
  createdAt        DateTime @default(now())
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  REVOKED
}
